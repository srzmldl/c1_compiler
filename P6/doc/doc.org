* tools/clang/lib/Parse/ParseStmt.cpp
** ParseIfStatement
*** 工作流程
    - 确认token是‘if’，否则输出错误
    - 吃掉if这个token
    - 检测if后是否紧跟着做括号，不是的话进行错误处理
    - 确定语言选项，C99或者c++的标准，存在C99orCXX布尔变量里
    - 进入if作用域(declscope和controlscope)
    - 分析左括号后面的条件表达式，调用ParseParentExprOrCondetion，这个用来分析'(' expression/condition')'
    - 错误的时后调用StmtError()错误处理程序
    - 用CondExp转为FullCondExp
    - 进入复合语句内部作用域innerscope(declscope)
    - 解析then的复合语句，并且得到后面的else的位置InnerStatementTrailingElseLoc
    - 退出then复合语句作用域
    - 判断有下个token是否为else
      + 是else的时候
        * 吃掉else的token
        * 进入else复合语句作用域innerscope(decelscope)
        * 调用parsestatement分析else语句
        * 退出else复合语句作用域
      + 是code_completion即代码结束符的时候，调用CodeCompleteAfterIf，中断解析，报stmterror
      + 检查前面得到的InnerStatementTrailingElseLoc是否合法，不合法则调用warning有悬空else
    - 退出if作用域
    - 最后检查三种错误以及错误恢复（详见下一小问）
    - 呼啦啦，if正确分析，调用ActOnIfStmt处理好if相关的后续工作。
*** 错误处理手段
    - parseIfStatement 调用时assert一下tok是‘if’
    - if后面不是紧跟着左括号出书期望左括号的信息
    - 之后调用条件表达式分析程序，错误的话调用stmtError处理错误
    - if {} code_completion 报stmterror
    - if {} 解析后面的else位置合法的时候报悬空else的warning
    - 三种错误情形报stmterror
      + thenstmt不合法&& elsestmt不合法
      + thenstmt不合法，elsestmt为空
      + thenstmt为空，elsestmt不合法
    - 接下来建立在除去上面三种错误的基础上(一个合法，一个不合法；或者全合法)
      + then不合法，else合法，直接用空语句代替thenstmt(即换成一个分号)
      + else不合法，then合法，类似的用空stmt代替elsestmt
** ParseWhileStatement
*** 结合ParseBreakStatement,说明clang如何处理作用域
**** 先了解scope类(看include/sema/Scope.h即可大致了解)
   - 可以看到定义了ScopeFlags枚举类型，里面有breakscope，continuescope之类的2的幂次的数，多重作用域的时候就只需要or起来就行了。判断作用域只需要and一下
   - 看一眼构造函数调用init(parent,scopeFlags)，构成了一个树形结构，并切初始化作用域标记
   - 然后有一堆诸如getBlockParent之类的函数，对各类作用域调用一些成员
   - 其他的暂时不看，本题了解这些就够了
**** 然后看看Parser/h里边的ParseScope类
   - 主要关心进入作用域EnterScope和退出作用域ExitScope即可，主要是在ScopeFlags上操作
**** 回到ParserWhileStatement答题
***** ParseWhileStatement中处理作用域
      - 根据得到的语言标准(C99orCXX),确定ScopeFlags
      - 传入用ScopeFlags构造WhileScope(注意flag有breakScope这些goto语句变形)
      - 进入substatement作用域(仅仅DeclScope)
      - 处理完后退出InnerScope，然后退出WhileScope
***** ParseBreakStatement
      - 很短，首先吃掉break这个token
      - 然后执行break，参数有breakLoc和getCurScope(),就是跳出当前的作用域
***** 综述
      - 利用ScopeFlags这个64位无符号数确定作用域类型，不同二进制位代表不同性质
      - 进入不同结构时进入不同作用域(传入不同scopeflags)
      - 有break语句则退出当前作用域，跳刀parent去
      - 正常结束结构则调用exit退出作用域
*** WhileScope和InnerScope的区别
    
#+begin_src c++
if (C99orCXX)
    ScopeFlags = Scope::BreakScope | Scope::ContinueScope |
                 Scope::DeclScope  | Scope::ControlScope;
  else
    ScopeFlags = Scope::BreakScope | Scope::ContinueScope;
  ParseScope WhileScope(this, ScopeFlags);
#+end_src

#+begin_src c++
 ParseScope InnerScope(this, Scope::DeclScope, C99orCXX, Tok.is(tok::l_brace));
#+end_src
    对比一下二者的构造马上就可以看出区别了。
    - InnerScope只有DeclScope有效(相应位为1),只能包含一个declaration
    - WhileScope(为了方便，只看率C99orCXX吧)则还有Break，Continue这些goto语句变种，从而支持这些语句；还包括了Decl和InnerScope一样；此外，还有ControlScope

*** scope释放时利用scopecache减少malloc次数
    - Parser.h中82行后几行定义了Cache用到的NumCachedScopes表示剩下的cache容量，ScopeCacheSize表示总大小，并定义了scope类型的大小为ScopeCacheSize的ScopeCache类数组，用来cache，就不用每次free，malloc了.(用数组模拟了一个栈)
    - 这个版本的clang的cache大小16
    - parser.cpp中EnterScope即进入作用域的时候，只有在cache空的时候才new，否则从cache中弹出一个到*N中，然后就不用malloc，init一下就可以用了
    - parser.cpp中ExitScope则只有在cache空间满了才delete，否则ScopeCache[NumCachedScopes++] = OldScope;存进去以后用。
    - 综上，有效地减小了new和delete次数
* tools/clang/lib/Parse/ParseExpr.cpp
** 处理二元运算的原理
*** ParseExpression过程简述
    - 先分析LHS
    - 再分析RHS,优先级时Comma
*** ParseRHSOfBinaryExpression过程简述
    - 传入LHS和最小优先级MinPrec,分析二元运算
    - 调用getBinPrecedence得到下一个token的优先级
    - 一直while循环，直到NextTokPrec优先级比MinPrec还小
      + 吃掉token
      + 碰上逗号后有不可能作为表达式开始的符号则return LHS
      + 碰上省略号则“搁置争议，留给子孙后代处理”
      + 处理三目运算
      + 得RHS
        * c++11&&l_brace的token则braced-init-list
        * c++并且nexttokPrec小于conditional的优先级则解析assignementexpression
        * 其他情况是castexpression
      + 检查RHS是否非法
      + ThisPrec暂存NextTokPrec，NextTokPrec取下一个运算符优先级
      + 处理下个运算符优先级更高,或者同级但是右结合的情况(详见优先级分析部分)
      + RHS合法,处理RHSIsInitList的情况
      + LHS合法,然后把LHS和RHS拼起来到LHS
*** 原理综述
    看了ParseRHSOfBinaryExpression就很清楚了, 再总结一下主要思想.
    - 通过传入MinPrec,限制在这层递归中while循环的运算距离.(即算到更小优先级的运算符就要回溯了)
    - 如果下一个运算符优先级更低,或者同级但是左结合,那么可以先算这个运算符,然后while继续下一个
    - 如果下一个优先级更高,或者同级但是右集合,这时候当前运算符就要保留,递归先算后面的,递归的距离边界是当前运算符优先级(+!isRightAssoc)
** 优先级和结合性的体现
*** OperatorPrecedence.h
    首先要了解一下关于优先级的一些声明。prec名字空间下有如下相关内容
    - Level枚举类型，Unkown最低，comma其次，然后按照优先级越高数字越大定义了LogicalOr，Additive等
    - 然后有一个方法getBinOpPrecedence返回指定二元运算的优先级。
*** 结合性体现
    - 默认左结合
    - ParseExpr.cpp第361行，ThisPrec优先级是Conditional(问号语句)或者Assignmentd(赋值语句),那么isRightAssoc则为true(因为这两种运算就是右结合的);否则就是左结合
    - 在优先级一样的时候考虑是否右结合(详见下部分)
*** 优先级体现
    - ParseExpr.cpp第366行有如下几种情况递归调用ParseRHSOfBinaryExpression,传入的是当前的RHS,nextTokPrec再取下一个.
      + ThisPrec<NextTokPrec
      + 优先级相等,但是是右结合
    - 上面递归实际上就是通过判断上面的两种情况决定先算后面的.实现了优先级和结合性.
* static analyzer
** 读readme.txt,分析工作原理
*** two layers
    - 静态分析引擎(GREExprEngine.cpp and friends)
    - 一些静态检查器(*Checker.cpp)
      + 通过Cheker和CheckerVisitor借口简历在引擎上
*** 工作原理
**** 基本概念
     - 程序的状态(变量或者表达式的值等)封装在state(ProgramState)中
     - 程序的位置称为program point(ProgramPoint)
     - state + program point --> exploded graph上的一个节点
**** 基本流程
     - 从root开始,上米娜有程序入口entry program point和初始状态
     - 然后分析expressions
     - 状态改变,生成带有更新program point和更新状态的新节点
     - 到达bug节点则找到了错误
**** 分支推导
     - 通过分治推导有多条路径,比如true branch和false branch分治
     - assumptions约束了program的value,这些约束存在ProgramState对象里(由Constraintmanager产生)
     - 如果条件分支造成约束条件不满足,则这个分支不可行,不能走这条路径
     - 通过节点cache防止指数爆炸
       + 如果新节点和已有节点状态一样，则不会new,而是复用已有节点
       + 节点复用造成环,不再是DAG
**** 节点和状态的不变性
     - 一旦create,就不再改变
     - immutability很关键,因为这个ExplodedGraph就是代表从入口开始分析程序的过程
     - 利用函数式数据结构实现永久化
**** 举个例子说明checkers和engine的交互
     - engine通过visitor interface和checker交互(如GREExprEngine调用PreVisitCallExpr())
     - checker检查是否有不满足的条件.然后:
       + 啥都不干
       + 产生新的ProgramState和ExplodedNode
       + 找到bug,告诉BugReporter对象
** cfg.c
** fib.c
** unreachable.c
** clang-check
** driver
** bonus1
** bonus2