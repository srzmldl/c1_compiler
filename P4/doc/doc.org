* 学习Bison
** 回答问题
*** makefile中expr编译任务
expr,expr1,exprL, exprL1的命令如下:
#+begin_src makefile
    $(YACC) -b $@ -o $(SRC)/$@.tab.c $(CONF)/$@.y
	$(LEX) -o$(SRC)/$@.lex.c $(CONF)/expr.lex
	$(CC) -o $(BIN)/$@ $(SRC)/$@.lex.c $(SRC)/$@.tab.c -ll -lm
#+end_src
可以尝试用`make expr`得到具体执行命令
#+begin_src #!/bin/bash
bison -d -y -b expr -o src/expr.tab.c config/expr.y
flex -i -I  -osrc/expr.lex.c config/expr.lex
gcc -g -Iinclude -o bin/expr src/expr.lex.c src/expr.tab.c -ll -lm
#+end_src
然后man一下bison,flex,gcc的
**** 第一条bison命令
     作用就是用bison将expr.y将类yacc翻译成c语言文件expr.tab.c
     + -d 产生头文件,但是不能指定文件(for POSIX Yacc)
     + -y 模拟POSIX Yacc
     + -b 指定输出文件前缀
     + -o 输出到文件
**** 第二条flex指令
     作用就是用flex将expr.lex中的正规式以及匹配动作等翻译到expr.lex.c中去
     + -i ignore case in patterns
     + -I 生成交互式的 scanner (与-B相对)
     + -o 指定输出文件名
**** 第三条gcc指令
     作用是用gcc编译expr.lex.c和expr.tab.c,生成可执行文件expr.
     + -o 指定输出的可执行文件名称
     + -g 生成调试信息,方便gdb等调试
     + -I 指定头文件查找目录
     + -lm link math库
     + -ll link了某个库吧.我木有用过这个.
*** 描述Yacc输入文法规范文件的格式,消化语法制导的翻译方案
**** 综述
yacc语法规范由三部份组成
声明
%%
翻译规则
%%
C语言编写的支持例程
**** 声明
声明部份由两节,均为可选. 
- 第一节'%{'和'%}'包起来,就是普通C语言的声明,如expr1.y和expr.y中都include了stdio.h.
- 第二节声明一些文法终结符,比如NUMBER,EOL等.
**** 翻译规则
每条规则由一个文法产生式以及和它联系的语义动作组成.没有加引号的字母数字串,若未声明成token,则式非终结符;加引号的单个字符,看城这个字符代表的记号.右部各个选择机器语义动作之间竖线隔开,最后一个选择后面用分号,表示产生式集合的结束.第一个左部非终结符式开始符号.

右部大括号括起来的语义动作终$$表示引用左部非终结符的属性值,$i表示引用右部第i个文法符号的属性值.

例如exp-->exp PLUS exp {$$ = $1 + $3;}就是把右部的两个exp值相加,结果赋值给左部的exp. 应该注意到语义动作是可以省略的.右部只有一个文法符号时,默认动作是{$$=$1}.
**** C语言例程
 - 词法分析器yylex()返回记号,这里由flex产生
 - yyerror() 输出错误信息
     
**** 语法制导的翻译方案
     expr.y为简单的表达式二义文法,通过指定优先级消除二义性. 包括加减乘除指数,负号,小括号.按照顺序指定了优先级,在规约规约冲突时选择先出现的表达式. 取负号的%prec标签强制优先级和结合性MINUS一样. 这个翻译反感根据对应token进行相应加减乘除操作即可,十分简单.

     expr1.y是非二义文法,翻译方案也是简单的在规约时根据规约式确定运算. 引入了fact和term消除二义性.
*** expr.tab.c和expr1.tab.c的异同; expr.y和expr1.y对expr.tab.c和expr1.tab.c影响
**** 异同
  - 二者最后实现的功能完全一致,只是expr.y主要利用yacc对优先级和左右结合的处理,以及%prec标签比较暴力地解决二义性;但是expr1.y通过修改文法来消除二义性.最终殊途同归,都正确的计算表达式的值
  - 有一大段共享代码,主要差别在一些常量和宏定义,以及状态机,以及动作.
  -  修改文法之后expr1的YYNNTS变成了6个,用来消除二义性;语法规则也变成15条,变得更多;YYNSTATES状态数expr1为25,expr为23,状态数更多;YYLAST为YYTABLE的最后一个索引,expr为42,expr1为25;终结符这些当然是一样的,都是12个.
  - 除了上面这点描述状态机相关的变量或常量的差别之外,还有1220行左右的case中的动作根据文法中的规定而异
  - 除了上述两个差别,以及一些line中中行号的改编,其他部份基本一致
**** 影响
  - 由异同可见主要代码结构没变,对状态机的利用方式没变.
  - 因为文法不同,构造的状态机自然不同.那么就会影响yytokennum,yypact等和状态机有关的变量以及YYLAST, YYNTOKENS等这类和状态机有关的宏定义;expr.tab.h中的一大堆define也因文法而变
  - 1220多行附近yyreduce标签里yyn的switch里的动作也因翻译规则而异
*** 了解L-asgn分析器的构成方法，简述.tab.c和.lex.c文件的结构
    asgn和asgn1基本一样,只是asgn1中用'op'代替了所有中缀运算符.所以这里只讲解更为复杂的asgn1.
**** L-asgn分析器的构成方法
     - 先把文法写到asgn1.y中,通过bison翻译成C语言文件asgn1.tab.c
     - 写好asgn1.lex词法分析,通过flex翻译成C语言文件asgn1.lex.c
     - gcc编译成L-asgn分析器.输入是L-asgn语法文件,输出结果.
**** asgn1.tab.c结构
     - 大量宏定义,定义了Bison版本信息,终结符的枚举值,描述状态机需要的状态,转移边以及相应动作. 如 yystos
     - 然后是打印位置,符号,数值等信息的函数.如YY_SYMBOL_PRINT
     - 接下来是一些错误处理函数,如yysyntax_error
     - 然后空间释放函数yydestruct
     - 然后是转化函数 yyparse,其中包括规约,各种错误处理,接收等程序段,可以剪刀很多用来goto的标签,从命名上可以看出意义.如
yyacceptlab,yyreduce等     
     - 最后是错误信息输出函数以及main函数,这是asgn1.y中定义的函数. 
**** asgn1.lex.c结构
     - 大量宏定义,定义了flex版本信息,一些常用的小函数,常量等.
     - 定义正规式匹配的状态机相关的信息,如状态,转移矩阵等
     - 然后是scanner函数,包含了匹配段,动作段等,从goto标签yy_match,do_actio等可以区分各段
     - 然后是一些状态机上要用的函数的实现,比如找前趋状态的函数yy_get_previous_state等
     - 接下来是缓冲区各种操作函数的实现,如create,delete等操作.
     - 然后是一些yyset_in,yyset_out之类接口的实现
     - 最后是空间操作,如yyalloc,yyfree等
** Bison理解
*** 规范格式
    见问题2.
*** 与flex的协作
- lex文件中的头文件不再是自己显式定义,而是include "expr.tab.h",由bison生成,flex使用.该头文件包含了各种记号的定义,yylval的声明等
- 词法分析器的第三部份函数被删除.事实上语法分析器会调用词法分析器. 可以在expr.tab.c看到很多的yylex()调用词法分析器取token
- 我们在gcc编译的时候把expr.tab.c和expr.lex.c链接到了一起
*** 接口
- main函数调用yyparse()对输入文本进行分析,看是否符合语言规范
- 语法分析器会不断调用yylex()通过词法分析器取token,并且二者共享符号表.
*** 文法对状态空间影响
    通过上一部份问题中expr,expr1的比较,二者虽然实现的功能完全一致,但是文法不同.一个是二义文法,通过优先级与定义左右结合来消除冲突;另一个将文法改成无二义文法. 二者状态数不一样,转移表也发生了很大的变化. 由于产生式发生变化,规约动作等也出现了差异. 所以即使接受同样的语言规范,不同文法的状态空间可以由很大差异.
* C1程序的分析器
** reduce/reduce冲突
*** 单目运算符和双目运算符冲突
    一开始直接老师给的文法,实际上是需要把单目运算符单独放到产生式里边就行了.
    - exp --> '+' Exp
    - exp --> '-' Exp
    - 用%prec标签规定下优先级
** shift/reduce冲突
*** if else 
移进规约冲突的时候默认移进,所以不用具体处理啦.
*** 
** 别的问题
*** 位置
    parser.y里如果不用位置信息不会在tok.hh里自动生成结构体.尝试的时候一直编译错误找了半天.

*** cond无效
** lexer
  - const
  - int
  - void
  - if
  - else
  - while
  - number
  - ident
  - ';'
  - ','
  - '='
  - '[]'
  - '{}'
  - '()'
  - '==', '!=', 
  - '<','>', '<=', '>='
  - BinOp: '+', '-', '*', '/', '%'
  - UnaryOp '+', '-'
** parser.y
CompUnit    → [ CompUnit ] (Decl | FuncDef ) 
                CompUnit代表一个C1程序文件，其中必须包含一个名为main的函数定义FuncDef
                这里假设一个C1程序只存放在一个C1程序文件中
Decl        → ConstDecl | VarDecl
ConstDecl   → const int ConstDef MultiConstDef ';'
MultiConstDef -> | , ConstDef MultiConstDef
ConstDef    → ident '=' Exp | ident '[' [ Exp ] ']' '=' '{' multiExp '}'
                ConstDecl常量声明：可以声明一个或多个整型常量、整型常量数组，如：
                const int a[]={2,3};
                声明了长度为2的常量数组a，a[0]、a[1]的值分别为2和3；
                数组在声明时若未指明长度，则长度为初始化表达式中值的个数。
                在程序中，不能对常量重新赋值。
                [注1]
VarDecl     → int Var{, Var}';'
Var         → ident | ident '[' Exp ']' | ident '=' Exp
            | ident '[' [ Exp ] ']' '=' '{' Exp { ',' Exp } '}'
                VarDecl 变量声明：可以声明整型和一维整型数组变量。
                [注2]
FuncDef     → void ident '(' ')' Block
                FuncDef 函数定义：无参函数，且必须有一个名字为main 的函数
Block       →'{' { BlockItem } '}'
BlockItem   → Decl | Stmt
                Block语句块：表示函数体或者复合语句，其中可以包含0个或多个声明或语句
Stmt        → LVal '=' Exp ';' | ident '(' ')' ';' | Block 
            | if '( Cond ')' Stmt [else Stmt ] | while '(' Cond ')' Stmt | ';'
LVal        → ident| ident '[' Exp ']'
Cond        → Exp RelOp Exp
RelOp       →'==' | '!=' | '<' | '>' | '<=' | '>='
Exp         → Exp BinOp Exp | UnaryOp Exp | '(' Exp ')' | LVal | number
BinOp       → '+' | '−' | '*' | '/' | '%'
UnaryOp     → '+' | '−'