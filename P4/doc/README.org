* Files
| doc.md                  | 回答问题的文档,md格式              |
| doc.org                 | org格式                            |
| README.org              | 这个文档                           |
| ../Makefile             | Makefile编译                       |
| ../bin/*                | 可执行文件                         |
| ../config/*             | flex,bison对应的词法规则,语法规则  |
| ../include/*            | 各种头文件                         |
| ../src/*                | main程序以及自动生成的代码         |
| ../test/recoverError    | 需要错误恢复的c1程序               |
| ../test/shouldTerminal  | 其他错误需要按要求即使中止的c1程序 |
| ../test/testCorrectCode | 正确的c1程序                       |
* 完成情况一览
所有提到的基本要求以及拓展要求全部完成.
| 学习bison,写理解                  | 完成                                       |
| 回答四个问题                      | 完成                                       |
| 加入debug动作,打印产生式          | 完成,增加了规约式最左边坐标输出,方便调试   |
| 三种错误报error以及恰当的恢复方式 | 完成                                       |
| 错误定位                          | 完成                                       |
| 模仿clang用^指到错误位置          | 完成                                       |
| 处理空格和缩进                    | 完成                                         |
| 编写至少5个C1测试                 | 完成.编写了各种要求的程序11个,实际上就小改 |
| 分析移进规约冲突的原因            | 完成                                       |

* 注意事项以及检查方法
** 检查方法
  - make
  - bin/c1 test/dididid (选各种类型的错误或者正确c1程序)
** 注意
  - 因为不要求if,while这些的括号判断,所以if(cond stmt这类直接当成其他错误退出.
  - complex.cpp有各种变态的情况,比如a = )(, a = -b--c))))(类似的.
  - 一个表达式种的报错次数式失配括号数
* 问题
- 每次报错前都会输出一个syntax error: 这个是调用yyerror会自动输出的.因为自己有一套错误输出,想去掉这个. 但是出现三个错误之外的错误的时候又需要用这个功能输出之后中止.
简而言之,需要再指定三个错误的时候不输出这句话,其他情况输出之后中止分析. 最终那三种错误都会输出两行信息.
- 模仿clang: 我用的方法十分简单粗暴. 先把整个程序全部读进来, 然后用定位信息去找'^'指向的位置. 顺便处理一下空格缩进这些东西. 实际上,感觉应该又更加高大上的方法, 更合理的应该是取token的时候存缓冲区之类的.
- 这种巨大的程序调试效率比较低.还得学习一发. bison看起来没有特殊的调试工具,只能在生成的巨大的c程序调试. 还有--graph生成的巨大的图虽然是矢量图,但仍然根!本!没!法!看!
  