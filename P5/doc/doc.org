* 5.1第二问,例子均来自compub
** AST 结构与构建(顺便把第一问也答了)
   - 查看node.hh种各种Node类型知
     + type域指明结点类型
     + loc存储位置信息
     + 然后是一些如打印dumpdot,setLoc等成员函数
     + InputNode儿子数是非空行数,所以用LineNode的Vector当链表存下来
     + LineNode因为只有一个asgn儿子,直接指定了*asgn
     + AsgnNode有var,exp儿子
     + UnaryExpNode一个exp儿子
     + BinaryExpNode,两个exp儿子,分别是左,右操作式
     + NumNode, VarNode叶子结点,没有儿子
     + ExpNode可以理解为一种泛结点,可以式UnaryExpNode,BinaryExpNode等
   - 先是root结点,内容是行数
   - 每一行一个LineNode,全都是root的儿子(空行被忽略),内容是"asgn"
   - 每个LineNode一个AsgnNode儿子,内容是"var|exp"
   - 对于每个AsgnNode
     + var半边指向VarNode,VarNode内容是变量名
     + exp半边指向ExpNode
   - expNode就可以分很多种了,各种数字,变量,运算构出exp子树即可
   - 每个结点还会通过setLoc把位置信息@$传入保存
   - 在规约的时候新建结点(空行,eol之类特殊情况除外),可以理解为自顶向下地构建好了AST
** $$, $1, $2等含义
   - 左部文法符号对应变量用$$调用,右部从第一个符号开始依次$1,$2...调用
   - 先在union中声明类型有哪些,样例中有num,var,node
   - type后尖括号定义了用$引用文法符号时的类型
     + 例如type<node> input line asgn exp在有input,line,asgn文法符号的时候可以用$符号调用这个node类型变量.
     + 如input->input line中 if($2!= NULL)语句
       * 用$2调用右部第二个文法符号对应的语义变量. 在type中知道这是node类型,表示语法树上的结点
       * 判断非空才连到root结点上作为root的儿子(append到儿子链表中),如果是空行直接忽略
       * if的执行语句中再次调用了$2转成LineNode指针类型
** @$的含义
   - 用来跟踪程序位置
   - 有first_line, first_column, last_line, last_column四个域
   - @$表示产生式左部符号,右部从第一个符号开始依次@1,@2...调用位置信息
   - 例如parser.y中asgn-->var_tok '=' exp 有一句$$->setLoc((Loc*)&(@$))
     + $$表示asgn对应的node
     + 然后调用asgn这个node的成员函数setLoc设置位置,并传入asgn的位置参数$$
     + 然后再看node.cc中setLoc的实现,就是讲node的loc的四个域对应赋值,这样结点的位置信息就记录下来了.
* 5.2第一问,AST结点在语法分析中的创建时机和信息填充时机
** dumpDot
   - 在语法分析AST结构建立好之后没有错误再建
   - 从根节点开始递归建立语法树
** AST
   - 产生式右部结点(儿子结点)已经建立之后,建立这个结点
   - 规约的时候建立新结点(需要new的产生式),并把父亲和各个儿子的关系确立
   - 涉及到multiExp,multiBlock之类的需要链表结构,都是写成左递归,所以规约时候,把next赋值即可,见代码思路里详细解释.
* 代码思路
** 类一览
   一个虚结点,其他结点均继承自Node(一开始有一个继承树,后来乱掉了,直接粗暴继承Node).
- Node : virtual类, next, head记录这个结点所在list的表头以及它的next
  + inputNode : 儿子链表用 vector 存储
  + ConstDeclNode,ConstDefEleNode, ConstDefArrLimNode, ConstDefArrNoLimNode
  + VarDeclNode, VarDefEleNoEquNode, VarDefArrLimNoEquNode
  + VarDefEleEquNode, VarDefArrNoLimEquNode, VarDefArrLimEquNode
  + FuncDefNode, BlockNode
  + RefArrNode, CondNode
  + AssignStmtNode, CallStmtNode, IfStmtNode
  + IfElseStmtNode, WhileStmtNode, CommaStmtNode
  + BinaryExpNode, UnaryExpNode, IdentNode, NumNode

** 链表实现MultiExp,MultiBlock等
   - 当一个part要指向不确定长度的内容时,通过链表实现.
   - 每个Node一定只会有一个next(因为树状结构)
   - 比如数组赋初值的时候,exps域就是一个list(实际上就是存储表头),在*.yy中,规约的时候注意更新相应的next以及本身的指针,比如MultiExp -> MultiExp, Exp,需要如下更新
     + $1->next = $2;
     + $$ = $3;(这个作用是为了保证上面的next没有错,即实际$值是表尾,不这么做的话最后只能画出表头和表尾)
   - 注意MultiBlock比较特殊,因为可能是NULL,需要各种判断再赋值
   - 输出的时候再dumpdot.cc中实现了drawList()函数,传入箭头尾巴的位置,和需要画的链表头,把链表扫一遍依次画出来即可.
     
** 记录位置以及多行注释(默认制表符号是4格)
   - PS: 只考虑正常编辑器里边那种四格缩进.
   - 模仿comppub里的parser.y再每次new出结点的时候setLoc即可.
   - 在lexer中匹配到/*之后的函数里,依次用yyinput()的时候扫描到换行则一样的++yycolumn =1,扫描到别的字符yyleng++, 扫描到制表符另外再+3即可
   - debug模式下每次规约产生式都顺便输出了位置,方便检查
   - 经过测试可以发现是先执行ACTION宏定义中的动作,再执行语义动作.所以再语义动作中,额外加的yyleng需要加到yycolumn上去
** 出错清空
   - 全局变量errorFlag记录是否已经出错,如果出错,errorFlag赋值为1,之后每次new,或者赋值别的儿子结点之前先判断errorFlag,没出错才建新结点
   - 每次new出来点之后存到全局vector,发现错误后立马把vector清空,之后不再加如新元素.
   - 在基类里写虚析构函数,delete的时候就会先调用子类的析构函数再调用父类的析构函数